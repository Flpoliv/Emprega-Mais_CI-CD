name: CI/CD - Emprega Mais OOP

on:
  push:
    branches: [ "dev", "main" ]
  workflow_dispatch:

# >>> AJUSTE estes nomes conforme seus recursos no Azure <<<
env:
  REGISTRY: empregamaisregistry.azurecr.io     # loginServer do seu ACR
  IMAGE_NAME: empregamaisoop                   # nome do repositório de imagem no ACR
  RESOURCE_GROUP: empregamais-rg               # resource group onde está o Web App
  WEBAPP_NAME_STG: empregamais-webapp-stg      # Web App (staging)
  WEBAPP_NAME_PROD: empregamais-webapp         # Web App (produção)

jobs:
  build_test:
    name: Build & Test (Maven)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      # usa seu wrapper mvnw que está no repo
      - name: Build + Test
        run: ./mvnw -B -e clean verify

      - name: Publicar artefatos (JAR)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: target/*.jar

  # docker_build_push:
  #   name: Build & Push Docker image
  #   runs-on: ubuntu-latest
  #   needs: build_test
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Login no Azure Container Registry
  #       uses: azure/docker-login@v2
  #       with:
  #         login-server: ${{ env.REGISTRY }}
  #         username: ${{ secrets.AZURE_ACR_USERNAME }}
  #         password: ${{ secrets.AZURE_ACR_PASSWORD }}

  #     - name: Build e Push
  #       run: |
  #         TAG=${{ github.run_number }}
  #         docker build -t $REGISTRY/$IMAGE_NAME:$TAG .
  #         docker push $REGISTRY/$IMAGE_NAME:$TAG
  #         docker tag  $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/$IMAGE_NAME:latest
  #         docker push $REGISTRY/$IMAGE_NAME:latest

  # deploy_staging:
  #   name: Deploy Staging (branch dev)
  #   runs-on: ubuntu-latest
  #   needs: docker_build_push
  #   if: github.ref == 'refs/heads/dev'
  #   steps:
  #     - name: Login no Azure
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Apontar Web App (staging) para a imagem :latest
  #       run: |
  #         az webapp config container set \
  #           -g ${{ env.RESOURCE_GROUP }} \
  #           -n ${{ env.WEBAPP_NAME_STG }} \
  #           --docker-custom-image-name "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" \
  #           --docker-registry-server-url "https://${{ env.REGISTRY }}"
  #         az webapp config appsettings set \
  #           -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME_STG }} \
  #           --settings WEBSITES_PORT=8080 PORT=8080
  #         az webapp restart -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME_STG }}

  # deploy_prod:
  #   name: Deploy Produção (branch main)
  #   runs-on: ubuntu-latest
  #   needs: docker_build_push
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Login no Azure
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Apontar Web App (prod) para a imagem :latest
  #       run: |
  #         az webapp config container set \
  #           -g ${{ env.RESOURCE_GROUP }} \
  #           -n ${{ env.WEBAPP_NAME_PROD }} \
  #           --docker-custom-image-name "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" \
  #           --docker-registry-server-url "https://${{ env.REGISTRY }}"
  #         az webapp config appsettings set \
  #           -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME_PROD }} \
  #           --settings WEBSITES_PORT=8080 PORT=8080
  #         az webapp restart -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME_PROD }}
